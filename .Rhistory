x = replicate(100, rnorm(100))
x
dim*x()
dimx()
x = rnorm(100)
x
x = abind(abind(x,2),3)
?abind
??abind
x = abind::abind(abind::abind(x,2),3)
x
x = abind::abind(abind::abind(x,along=2),along=3)
x
dim(x)
x
x = rnorm(100)
unit.func=function(x,inputRange,autoRange,step){
if(all(x==0)){
if(RangeOnly){
return('Cannot calculate range with constant input')
}else{
return(x)
}
}else{
if(missing(inputRange) & !autoRange){
inputRange = c(min(x),max(x))
}else{
if(autoRange){
Im.q = quantile(x,probs=seq(0,1,step))
inputRange = Im.q[c(2,length(Im.q)-1)]
}
}
if(RangeOnly){
return(inputRange)
}else{
y = (x-inputRange[1])/(diff(inputRange))
y[which(y<0)] = 0;y[which(y>1)] = 1
return(y)
}
}
}
do.call('unit.func',list(x,inputRange,autoRange,step))
unit.func=function(x,...){
if(all(x==0)){
if(RangeOnly){
return('Cannot calculate range with constant input')
}else{
return(x)
}
}else{
if(missing(inputRange) & !autoRange){
inputRange = c(min(x),max(x))
}else{
if(autoRange){
Im.q = quantile(x,probs=seq(0,1,step))
inputRange = Im.q[c(2,length(Im.q)-1)]
}
}
if(RangeOnly){
return(inputRange)
}else{
y = (x-inputRange[1])/(diff(inputRange))
y[which(y<0)] = 0;y[which(y>1)] = 1
return(y)
}
}
}
do.call('unit.func',list(x,inputRange,autoRange,step))
unit.func=function(x){
list2env(objects, envir = parent.frame()
if(all(x==0)){
if(RangeOnly){
return('Cannot calculate range with constant input')
}else{
return(x)
}
}else{
if(missing(inputRange) & !autoRange){
inputRange = c(min(x),max(x))
}else{
if(autoRange){
Im.q = quantile(x,probs=seq(0,1,step))
inputRange = Im.q[c(2,length(Im.q)-1)]
}
}
if(RangeOnly){
return(inputRange)
}else{
y = (x-inputRange[1])/(diff(inputRange))
y[which(y<0)] = 0;y[which(y>1)] = 1
return(y)
}
}
}
unit.func=function(x){
list2env(objects, envir = parent.frame())
if(all(x==0)){
if(RangeOnly){
return('Cannot calculate range with constant input')
}else{
return(x)
}
}else{
if(missing(inputRange) & !autoRange){
inputRange = c(min(x),max(x))
}else{
if(autoRange){
Im.q = quantile(x,probs=seq(0,1,step))
inputRange = Im.q[c(2,length(Im.q)-1)]
}
}
if(RangeOnly){
return(inputRange)
}else{
y = (x-inputRange[1])/(diff(inputRange))
y[which(y<0)] = 0;y[which(y>1)] = 1
return(y)
}
}
}
do.call('unit.func',x)
unit.func(x)
?list2env
ls()
?missing()
missing(inputRange)
source('/mnt/DATA_01/myGit/MorphR/R/autoNormalize.R', echo=TRUE)
Mat = replicate(100, rnorm(100))
AutoNormalize(Mat)
source('/mnt/DATA_01/myGit/MorphR/R/autoNormalize.R', echo=TRUE)
AutoNormalize(Mat)
display(AutoNormalize(Mat))
EBImage::display(AutoNormalize(Mat))
EBImage::display(AutoNormalize(Mat,autoRange = F))
Mat
Mat = abind(Mat,Mat,along=3)
Mat = abind::abind(Mat,Mat,along=3)
Mat
display(AutoNormalize(Mat))
AutoNormalize(Mat)
unit.fct=function(x,...){
if(all(x==0)){
if(RangeOnly){
return('Cannot calculate range with constant input')
}else{
return(x)
}
}else{
if(missrg & !autoRange){
inputRange = c(min(x),max(x))
}else{
if(autoRange){
Im.q = quantile(x,probs=seq(0,1,step))
inputRange = Im.q[c(2,length(Im.q)-1)]
}
}
if(RangeOnly){
return(inputRange)
}else{
y = (x-inputRange[1])/(diff(inputRange))
y[which(y<0)] = 0;y[which(y>1)] = 1
return(y)
}
}
}
x = Mat[,,1]
x
unit.fct(x)
missrg = missing(inputRange)
missrg=T
unit.fct(x)
autoRange=T
RangeOnly=F
step=0.005
unit.fct(x)
Rangeonly=T
unit.fct(x)
RangeOnly=T
unit.fct(x)
library(EBImage)
library(abind)
source('/mnt/DATA_01/myGit/MorphR/R/autoNormalize.R', echo=TRUE)
mat = abind(replicate(100, rnorm(100)),replicate(100, rnorm(100)),along=3)
mat
source('/mnt/DATA_01/myGit/MorphR/R/autoNormalize.R', echo=TRUE)
test = AutoNormalize(matrix(data, nrow = rows, ncol = cols))
test = AutoNormalize(mat)
source('/mnt/DATA_01/myGit/MorphR/R/autoNormalize.R', echo=TRUE)
test = AutoNormalize(mat)
test
EBImage::display(test)
test = AutoNormalize(mat,RangeOnly=T)
test
test = AutoNormalize(mat,RangeOnly=T,separate=F)
test
test = AutoNormalize(mat,RangeOnly=T,autoRange=F,separate=F)
test
test = AutoNormalize(mat,RangeOnly=T,autoRange=F,separate=F)
test
test = AutoNormalize(mat,RangeOnly=T,autoRange=T,separate=F)
test
test = AutoNormalize(mat,RangeOnly=F,autoRange=F,separate=F)
test
source('/mnt/DATA_01/myGit/MorphR/R/autoNormalize.R', echo=TRUE)
m = replicate(100, rnorm(100))
m.norm = autoNormalize(m);m.autoNorm = autoNormalize(m,autoRange=T)
plot(density(m));points(density(m),type='l',col='red');points(density(m),type='l',col='blue')
m = replicate(100, rnorm(100))
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T)
plot(density(m));points(density(m),type='l',col='red');points(density(m),type='l',col='blue')
m = replicate(100, rnorm(100))
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autonorm),type='l',col='blue')
m = replicate(100, rnorm(100))
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
?rnorm
m = replicate(100, rnorm(1))
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T)
m = replicate(100, rnorm(1))
m
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
?sample
m = replicate(100, sample(1:1000,100)/1000)
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
m = replicate(100, sample(1:1000,100)/1000)
m
display(m)
quantile(m)
m = replicate(100, sample(1:1000,100)/1000)
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T,step=10**-2)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
m = replicate(1000, sample(1:1000,1000)/1000)
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T,step=10**-2)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
?rnorm
m = replicate(100, rnorm(mean=0,sd=0.5))
m = replicate(100, rnorm(1,mean=0,sd=0.5))
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T,step=10**-2)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
m = replicate(100, rnorm(1,mean=0,sd=0.5))
m.norm = autoNormalize(m,autoRange=F);m.autoNorm = autoNormalize(m,autoRange=T,step=10**-1)
plot(density(m));points(density(m.norm),type='l',col='red');points(density(m.autoNorm),type='l',col='blue')
m = matrix(0,ncol=100,nrow=100)
m
autoNormalize(m)
autoNormalize(m,RangeOnly = T)
getwd(0)
getwd()
setwd("/mnt/DATA_01/myGit/MorphR")
library(devtools)
library(roxygen2)
source('/mnt/DATA_01/myGit/MorphR/R/sigmoNormalize.R', echo=TRUE)
mat = replicate(1000,rnorm(1000))
dim(mat)
EBImage::display(sigmoNormalize(mat))
EBImage::display(Normalize(mat))
EBImage::display(autoNormalize(mat))
EBImage::display(autoNormalize(mat,autoRange = F))
getwd(0)
getwd()
list.files()
document()
document()
build()
build()
document()
build()
install.packages("/mnt/DATA_01/myGit/MorphR_0.1.3.tar.gz", repos = NULL, type = "source")
library(EBImage)
library(MorphR)
library(roxygen2)
library(devtoosl)
library(devtools)
document()
build()
document()
build()
